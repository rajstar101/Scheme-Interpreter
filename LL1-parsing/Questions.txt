Part 1: Table Parsing

1) Take a look at the usage statement in main for tableParser.py, and try running tableParser.py. sampleStrings.txt has some strings to parse, and grammarTable.txt has a grammar table. Examine these files, and decide whether the parser's output is correct. Add two additional strings to sampleStrings.txt: one that you think the parser should be able to parse, and one that you think it should not be able to parse; note that our tokenizer cheats a bit by splitting on spaces, so make sure you have a space in between each token. 



2) In the space below, describe the format of grammarTable.txt. What does each non-comment line represent, and how many separate parts does each line have? (If you're stuck, work on the next question, and then come back to this question.)

3) Read the functions readTable and parse. Below, describe the format of the dictionary returned by readTable. Make clear what the keys and values represent.


4) What type of data structure is being used to represent the partially derived part (i.e., the part that is not the string)? Why does this data structure make sense given the way the algorithm works? Be specific about what makes this efficient.


5) Take a look at the parse trees that are printed. Try to draw the parse tree on paper using a typical tree format. Trace through the code for creating the tree. Why do we need the treeStack variable? Why do we only ever modify children by calling the addFirstChild method? That is, why don't we ever have to add children not as the first child?





Part 2: Recursive descent parsing

rdp.py has an implementation of a recursive descent parser for the same grammar that is in grammarTable.txt. Unlike tableParser.py, the rdp.py can't parse any grammar: the code itself specifically reflects the grammar structure.

1) In a recursive descent parser, we have one function for every non-terminal. Each call to that function represents an expansion of that non-terminal in the parse tree. We start by calling the function for the start symbol. Look at the code in rdp.py. What's the start symbol for the grammar being parsed and how can you tell that from the code (not just your knowledge that we're parsing the same grammar as in grammarTable.txt)?


2) Each function has a case for each rule, as well as a final case that throws an exception when something can't be parsed. Given the grammar rules you've written, explain why E and Es each have the particular cases that they do. How do these cases relate to first and follow sets?


3) Imagine we were trying to write a recursive descent parser for a grammar that has immediate left-recursion. We could write code for this, but what error would occur when running the code?


4) We said that an LL(1) table parser is top-down and produces a leftmost derivation. Is the same true of a recursive descent parser? Why or why not? (Take this as an opportunity to remind yourself what these things mean if you've forgotten!)